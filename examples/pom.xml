<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>at.willhaben.willtest</groupId>
        <artifactId>parent</artifactId>
        <version>1.1.8</version>
    </parent>

    <artifactId>examples</artifactId>
    <version>1.1.8</version>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>Practical examples</description>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>misc</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>log4j</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>browserstack</artifactId>
        </dependency>
        <dependency>
            <groupId>com.browserstack</groupId>
            <artifactId>browserstack-local-java</artifactId>
            <version>0.1.0</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.25</version>
        </dependency>
    </dependencies>

    <properties>
        <geckodriver.version>v0.16.1</geckodriver.version>
        <geckodriver.type>This will be overwritten by a profile for the specific platform</geckodriver.type>
        <geckodriver.archive>geckodriver-${geckodriver.version}-${geckodriver.type}</geckodriver.archive>
        <geckodriver.url>https://github.com/mozilla/geckodriver/releases/download/${geckodriver.version}/${geckodriver.archive}</geckodriver.url>
        <geckodriver.extension></geckodriver.extension>
        <geckodriver.folder>${project.build.directory}</geckodriver.folder>

        <browserstack.type>This will be overwritten by a profile for the specific platform</browserstack.type>
        <browserstack.url>https://www.browserstack.com/browserstack-local/BrowserStackLocal-${browserstack.type}.zip</browserstack.url>
        <browserstack.archive>BrowserStackLocal-${browserstack.type}.zip</browserstack.archive>
        <browserstack.folder>${project.build.directory}</browserstack.folder>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>2.20</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <argLine>-Dwebdriver.gecko.driver=${geckodriver.folder}${file.separator}geckodriver${geckodriver.extension}</argLine>
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>at.willhaben.willtest.browserstack.rule.BrowserstackListener</value>
                        </property>
                    </properties>
                    <skip>false</skip>
                    <groups>at.willhaben.willtest.examples.BrTest</groups>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-geckodriver</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source><![CDATA[
                                String url = project.properties['geckodriver.url'];
                                String archiveName = project.properties['geckodriver.archive'];
                                AntBuilder ant = new AntBuilder();
                                String geckodriverFolder = project.properties['geckodriver.folder'];
                                String archivePath = geckodriverFolder + File.separator + archiveName;
                                File archiveFile = new File(archivePath);
                                if (!archiveFile.exists()) {
                                    println("Downloading geckodriver from " + url + "...");
                                    ant.mkdir(dir: geckodriverFolder);
                                    ant.get(
                                            src: url,
                                            dest: archivePath,
                                            skipexisting: false);
                                    if (archiveName.endsWith("tar.gz")) {
                                        ant.untar(src: archivePath, dest: geckodriverFolder, compression: 'gzip');
                                        ant.chmod(file:geckodriverFolder + File.separator + 'geckodriver',perm:'+x');
                                    } else {
                                        ant.unzip(src: archivePath, dest: geckodriverFolder);
                                    }
                                }
                                ]]></source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>download-browserstack-local</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source><![CDATA[
                                String url = project.properties['browserstack.url'];
                                String archiveName = project.properties['browserstack.archive'];
                                AntBuilder ant = new AntBuilder();
                                String browserstackFolder = project.properties['browserstack.folder'];
                                String archivePath = browserstackFolder + File.separator + archiveName;
                                File archiveFile = new File(archivePath);
                                if (!archiveFile.exists()) {
                                    println("Downloading browserstack-local from " + url + "...");
                                    ant.mkdir(dir: browserstackFolder);
                                    ant.get(
                                            src: url,
                                            dest: archivePath,
                                            skipexisting: false);
                                    if (archiveName.endsWith("tar.gz")) {
                                        ant.untar(src: archivePath, dest: browserstackFolder, compression: 'gzip');
                                        ant.chmod(file:browserstackFolder + File.separator + 'BrowserStackLocal',perm:'+x');
                                    } else {
                                        ant.unzip(src: archivePath, dest: browserstackFolder);
                                    }
                                }
                                ]]></source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>mac</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <geckodriver.type>macos.tar.gz</geckodriver.type>
                <browserstack.type>darwin-x64</browserstack.type>
            </properties>
        </profile>
        <profile>
            <id>linux</id>
            <activation>
                <os>
                    <family>unix</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <geckodriver.type>linux64.tar.gz</geckodriver.type>
                <browserstack.type>linux-x64</browserstack.type>
            </properties>
        </profile>
        <profile>
            <id>win32</id>
            <activation>
                <os>
                    <family>windows</family>
                    <arch>x86</arch>
                </os>
            </activation>
            <properties>
                <geckodriver.type>win32.zip</geckodriver.type>
                <geckodriver.extension>.exe</geckodriver.extension>
                <browserstack.type>win32</browserstack.type>
            </properties>
        </profile>
        <profile>
            <id>win64</id>
            <activation>
                <os>
                    <family>windows</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <geckodriver.type>win64.zip</geckodriver.type>
                <geckodriver.extension>.exe</geckodriver.extension>
                <browserstack.type>win32</browserstack.type>
            </properties>
        </profile>
    </profiles>
</project>
