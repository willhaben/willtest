package at.willhaben.willtest.maven.utils;

import com.sun.codemodel.internal.*;
import org.junit.runner.Description;
import org.junit.runner.Result;
import org.junit.runner.RunWith;
import org.junit.runner.notification.RunListener;
import org.junit.runners.Suite;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * <p>Generates a test suite class into maven target folder, which will contain the test classes in the execution order.</p>
 * <p>The class will have the FQN {@value SUITE_TARGET_CLASS_NAME_PREFIX}{@value DATE_FORMAT}.</p>
 * <p>The javadoc of the generated class will contain a table where the method order can be also seen.</p>
 * How to use it? See at the <a href="http://maven.apache.org/surefire/maven-surefire-plugin/examples/junit.html#Using_Custom_Listeners_and_Reporters">official surefire documentation site.</a>
 */
public class SuiteGeneratingRunListener extends RunListener {
    static final String SUITE_TARGET_CLASS_NAME_PREFIX = "at.willhaben.willtest.generated.Suite";
    private static final String MAVEN_MODULE_DIRECTORY_SYSTEM_PROPERTY = "basedir";
    private static final String TARGET = "target";
    private static final String VALUE_PARAM = "value";
    public static final String DATE_FORMAT = "_yyyyMMdd_HHmmss";
    private Map<String,String> importedTestClasses = new HashMap<>();

    /**
     * {@link LinkedHashMap} to preserve insertion order
     */
    private LinkedHashMap<String,List<String>> testClassesAndTheirTests = new LinkedHashMap<>();

    @Override
    public synchronized void testStarted(Description description) throws Exception {
        super.testStarted(description);
        String className = description.getClassName();
        List<String> testDescriptions = testClassesAndTheirTests.computeIfAbsent(className, key -> new ArrayList<>());
        testDescriptions.add("Method '" + description.getMethodName() + "', DisplayName: '" + description.getDisplayName() + "'" );
    }

    @Override
    public void testRunFinished(Result result) throws Exception {
        super.testRunFinished(result);
        JCodeModel codeModel = new JCodeModel();
        JDefinedClass resultClass = codeModel._class(getSuiteClassName());
        JClass suiteClazz = codeModel.ref(Suite.class);
        resultClass.annotate(RunWith.class).param(VALUE_PARAM, suiteClazz);

        JClass suiteClasses = codeModel.ref(Suite.SuiteClasses.class);

        JAnnotationArrayMember testClassArray = resultClass.annotate(suiteClasses).paramArray(VALUE_PARAM);

        testClassesAndTheirTests.keySet().forEach(className -> addClassToSuite(codeModel, testClassArray, className));

        resultClass.javadoc().add(getJavaDocComment());

        File file = new File(getTargetDirectory());
        if ( !file.exists() && !file.mkdirs() ) {
            throw new RuntimeException("Cannot create folder " + file.getAbsolutePath());
        }
        codeModel.build(file);
    }

    private void addClassToSuite(JCodeModel codeModel, JAnnotationArrayMember testClassArray, String className) {
        try {
            Class testClass = Class.forName(className);
            String simpleName = testClass.getSimpleName();
            if ( !importedTestClasses.containsKey(simpleName) ) {
                JClass importedClass = codeModel.ref(testClass);
                importedTestClasses.put(simpleName,className);
                testClassArray.param(importedClass);
            } else {
                testClassArray.param(testClass);
            }
        } catch (ClassNotFoundException e) {
            throw new IllegalArgumentException("Cannot add class with name " + className + "!", e);
        }
    }

    private String getJavaDocComment( ) {
        StringBuilder sb = new StringBuilder();
        sb.append("<p>Test suite generated by ")
                .append(SuiteGeneratingRunListener.class.getName())
                .append(" based on execution order in surefire/failsafe maven plugin. " +
                        "Below you see the classes in order of execution and in the second column " +
                        "the test method order inside the class file.</p>\n")
                .append("<table>\n")
                .append("<tr>\n\t<th>Test class</th><th>Test method and display name</th>\n</tr>\n");
        testClassesAndTheirTests.forEach( (clazz, methods) -> sb.append(testClassToHTML(clazz, methods)));
        sb.append("</table>");
        return sb.toString();
    }

    private String testClassToHTML(String key, List<String> value) {
        StringBuilder sb = new StringBuilder();
        sb.append("<tr>\n");
        if ( value.size() > 1) {
            sb.append("\t<td rowspan=\"").append(value.size()).append("\">");
        }
        else {
            sb.append("\t<td>");
        }
        sb.append(key).append("</td>");
        for( int i = 0; i < value.size(); i++ ) {
            if ( i == 0 ) {
                sb.append("<td>").append(value.get(i)).append("</td>\n</tr>\n");
            }
            else {
                sb.append("<tr>\n\t<td>").append(value.get(i)).append("</td>\n</tr>\n");
            }
        }
        return sb.toString();
    }

    private String getTargetDirectory() {
        return Optional.ofNullable(System.getProperty(MAVEN_MODULE_DIRECTORY_SYSTEM_PROPERTY)).orElse(".")
                + File.separator + TARGET;
    }

    private String getSuiteClassName() {
        return SUITE_TARGET_CLASS_NAME_PREFIX + getTimeStamp();
    }

    private String getTimeStamp() {
        return new SimpleDateFormat(DATE_FORMAT).format(getCurrentDate());
    }

    Date getCurrentDate() {
        return new Date();
    }
}
